// editor-app/src/hooks/useTemplateUploader.ts
import { useCallback } from "react";
import { db } from "../firebase";
import { doc, setDoc, serverTimestamp } from "firebase/firestore";

import type { Field, AnimationLayer, DesignJSON, PhotoLayer } from "../types/editor";
import { BASE_CANVAS } from "../constants/editor";
import { uploadToStorage } from "../firebase/uploadToStorage";
import { upsertTags } from "../lib/upsertTags";

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:
 * - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π templateId (–æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ "template/")
 * - –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω
 * - —Å–æ–±–∏—Ä–∞–µ–º designJSON (–±–µ–∑ runtime-–ø–æ–ª—è lottieData)
 * - –ø–∏—à–µ–º –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firestore: templates/{templateId}
 */
export function useTemplateUploader(
  templateId: string,
  fields: Field[],
  backgroundUrl: string,
  backgroundFile: File | null,
  setBackgroundFile: (file: File | null) => void,
  subcategoryId: string,
  title: string,
  tags: string[],
  animationLayers: AnimationLayer[] = [],
  categories: {
    id: string;
    title: string;
    subcategories: { id: string; title: string }[];
  }[] = [],
  photoLayer?: PhotoLayer | null
) {
  const handleCreateTemplate = useCallback(async () => {
    try {
      if (!templateId) {
        alert("templateId is required");
        return undefined;
      }

      // üîß —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å "template/"
      const cleanId = templateId.replace(/^template\//, "");

      // –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const category =
        categories.find((cat) => cat.subcategories?.some((s) => s.id === subcategoryId)) || null;
      const subcategory = category?.subcategories?.find((s) => s.id === subcategoryId) || null;

      if (!category || !subcategory) {
        alert("Select correct category & subcategory.");
        return undefined;
      }

      // —Ñ–æ–Ω
      let finalBgUrl: string | null = backgroundUrl || null;
      if (backgroundFile) {
        const { url } = await uploadToStorage(`templates/${cleanId}/assets`, backgroundFile);
        finalBgUrl = url || null;
      }

      // —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ runtime-–ø–æ–ª–µ lottieData, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
      const cleanedAnimations: AnimationLayer[] = (animationLayers || []).map((layer) => {
        if (layer?.type === "lottie") {
          const copy = { ...layer } as Partial<AnimationLayer> & { lottieData?: unknown };
          delete copy.lottieData;
          return copy as AnimationLayer;
        }
        return layer;
      });

      // JSON –¥–∏–∑–∞–π–Ω–∞
      const designJSON: DesignJSON = {
        canvas: { width: BASE_CANVAS.width, height: BASE_CANVAS.height, version: 1 },
        background: { url: finalBgUrl },
        layers: {
          fields,
          animations: cleanedAnimations,
          ...(photoLayer?.hasPhoto ? { photo: photoLayer } : {}),
        },
      };

      const cleanTags = tags.map((t) => t.trim()).filter(Boolean);

      // –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ templates/{id}
      await setDoc(
        doc(db, "templates", cleanId),
        {
          id: cleanId,
          title: (title || "").trim() || "Untitled",
          categoryId: category.id,
          subcategoryId,
          tags: cleanTags,
          backgroundUrl: finalBgUrl,
          designJSON,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp(),
        },
        { merge: true }
      );

      if (cleanTags.length) {
        await upsertTags(cleanTags);
      }

      setBackgroundFile(null);
      return cleanId;
    } catch (err) {
      console.error("‚ùå Create template failed:", err);
      alert("Template creation failed. See console.");
      return undefined;
    }
  }, [
    templateId,
    fields,
    backgroundUrl,
    backgroundFile,
    setBackgroundFile,
    subcategoryId,
    title,
    tags,
    animationLayers,
    categories,
    photoLayer,
  ]);

  return { handleCreateTemplate };
}